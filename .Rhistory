abline(mean(res.table.bmi.discr[,1]), 1)
abline(mean(res.table.bmi.discr[,1]), 10)
abline(1, mean(res.table.bmi.discr[,1]))
?abline
abline(v=mean(res.table.bmi.discr[,1]))
abline(v=mean(res.table.bmi.discr[,1]), col="red")
hist(res.table.bmi.discr[,1], main="Histogram of 'a'", xlab="value", breaks=50)
hist(res.table.bmi.discr[,1], main="Histogram of 'a'", xlab="value", breaks=25)
abline(v=mean(res.table.bmi.discr[,1]), col="red")
hist(res.table.bmi.discr[,1], main="Histogram of 'a'", xlab="value", breaks=15)
abline(v=mean(res.table.bmi.discr[,1]), col="red")
hist(res.table.bmi.discr[,1], main="Histogram of 'a'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr[,1]), col="red")
abline(v=mean(res.table.bmi.discr[,1]), col="red", cex=0.8)
abline(v=mean(res.table.bmi.discr[,1]), col="red", cex=1)
text(mean(res.table.bmi.discr[,1]), 25, "Mean a")
hist(res.table.bmi.discr$f1, main="Histogram of 'f1'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$a), col="red")
abline(v=mean(res.table.bmi.discr$f1), col="red")
par(mfrow=c(4,2))
hist(res.table.bmi.discr$a, main="Histogram of 'a'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$a), col="red")
hist(res.table.bmi.discr$f1, main="Histogram of 'f1'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$f1), col="red")
hist(res.table.bmi.discr$Q, main="Histogram of 'Q'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$Q), col="red")
hist(res.table.bmi.discr$f, main="Histogram of 'f'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$f), col="red")
hist(res.table.bmi.discr$b, main="Histogram of 'b'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$b), col="red")
hist(res.table.bmi.discr$mu0, main="Histogram of 'mu0'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$mu0), col="red")
hist(res.table.bmi.discr$theta, main="Histogram of 'theta'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$theta), col="red")
res.table.dbp.discr <- matrix(nrow=100,ncol=7)
colnames(res.table.dbp.discr) <- c("a", "f1", "Q", "f", "b", "mu0", "theta")
par(mfrow=c(2,4))
hist(res.table.bmi.discr$a, main="Histogram of 'a'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$a), col="red")
hist(res.table.bmi.discr$f1, main="Histogram of 'f1'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$f1), col="red")
hist(res.table.bmi.discr$Q, main="Histogram of 'Q'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$Q), col="red")
hist(res.table.bmi.discr$f, main="Histogram of 'f'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$f), col="red")
hist(res.table.bmi.discr$b, main="Histogram of 'b'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$b), col="red")
hist(res.table.bmi.discr$mu0, main="Histogram of 'mu0'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$mu0), col="red")
hist(res.table.bmi.discr$theta, main="Histogram of 'theta'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$theta), col="red")
res.table.dbp.discr <- matrix(nrow=100,ncol=7)
colnames(res.table.dbp.discr) <- c("a", "f1", "Q", "f", "b", "mu0", "theta")
pdf(file = "~/Dropbox/spm/tests/Simulation/results/bmi.discr.hists.pdf")
par(mfrow=c(2,4))
hist(res.table.bmi.discr$a, main="'a'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$a), col="red")
hist(res.table.bmi.discr$f1, main="'f1'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$f1), col="red")
hist(res.table.bmi.discr$Q, main="'Q'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$Q), col="red")
hist(res.table.bmi.discr$f, main="'f'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$f), col="red")
hist(res.table.bmi.discr$b, main="'b'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$b), col="red")
hist(res.table.bmi.discr$mu0, main="'mu0'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$mu0), col="red")
hist(res.table.bmi.discr$theta, main="'theta'", xlab="value", col="green")
abline(v=mean(res.table.bmi.discr$theta), col="red")
res.table.dbp.discr <- matrix(nrow=100,ncol=7)
colnames(res.table.dbp.discr) <- c("a", "f1", "Q", "f", "b", "mu0", "theta")
dev.off()
start.pars <- c(mean(res.table.bmi.discr$a),
mean(res.table.bmi.discr$f1),
mean(res.table.bmi.discr$Q),
mean(res.table.bmi.discr$f),
mean(res.table.bmi.discr$b),
mean(res.table.bmi.discr$mu0),
mean(res.table.bmi.discr$theta))
i=1
library(spm)
setwd("/Volumes/G/spm/simulation/data/")
res.table.bmi.cont <- matrix(nrow=100,ncol=7)
colnames(res.table.bmi.cont) <- c("a", "f1", "Q", "f", "b", "mu0", "theta")
d <- read.table(paste("sim_cont_BMI_5000_", i, ".csv", sep=''), header = TRUE)
ans <- spm_integral_1D(dat=d,parameters = start.pars)
ans <- spm_integral_1D(dat=d[,2:6],parameters = start.pars)
ans <- spm_integral_1D(dat=d[,2:6],parameters = start.pars)
ans
ans <- spm_integral_MD(dat=d[,2:6],parameters = start.pars, k=1)
ans
res.table.bmi.cont[i,1] <- ans$a
res.table.bmi.cont[i,2] <- ans$f1
res.table.bmi.cont[i,3] <- ans$Q
res.table.bmi.cont[i,4] <- ans$f
res.table.bmi.cont[i,5] <- ans$b
res.table.bmi.cont[i,6] <- ans$mu0
res.table.bmi.cont[i,7] <- ans$theta
res.table.bmi.cont <- matrix(nrow=100,ncol=7)
colnames(res.table.bmi.cont) <- c("a", "f1", "Q", "f", "b", "mu0", "theta")
start.pars <- c(mean(res.table.bmi.discr$a),
mean(res.table.bmi.discr$f1),
mean(res.table.bmi.discr$Q),
mean(res.table.bmi.discr$f),
mean(res.table.bmi.discr$b),
mean(res.table.bmi.discr$mu0),
mean(res.table.bmi.discr$theta))
for(i in 1:100) {
d <- read.table(paste("sim_cont_BMI_5000_", i, ".csv", sep=''), header = TRUE)
ans <- spm_integral_MD(dat=d[,2:6],parameters = start.pars, k=1)
cat("Iteration:",i)
res.table.bmi.cont[i,1] <- ans$a
res.table.bmi.cont[i,2] <- ans$f1
res.table.bmi.cont[i,3] <- ans$Q
res.table.bmi.cont[i,4] <- ans$f
res.table.bmi.cont[i,5] <- ans$b
res.table.bmi.cont[i,6] <- ans$mu0
res.table.bmi.cont[i,7] <- ans$theta
}
write.table(x = res.table.bmi.cont, file="~/Dropbox/spm/tests/Simulation/results/res.table.bmi.cont.csv", row.names=FALSE)
start.pars
?spm_integral_MD
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
shiny::runApp('Projects/ld_effects')
library(ggplot2)
library(grid)
library(extrafont)
source("multiplot.R")
oldState<-NULL
newState<-NULL
t0 <- NULL
pvv1 <- NULL
pvv2 <- NULL
m00 <- NULL
m10 <- NULL
m01 <- NULL
calc <- function(pars) {
m00 <- pars[1]
m01 <- pars[2]
m10 <- pars[3]
m11 <- pars[4]
mu10 <- pars[5]
mu00 <- pars[6]
mu11 <- pars[7]
mu01 <- pars[8]
m00t <- function(t) {
m00*exp(-1*mu00*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
m01t <- function(t) {
m01*exp(-1*mu01*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
m11t <- function(t) {
m11*exp(-1*mu11*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
m10t <- function(t) {
m10*exp(-1*mu10*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
t1 <- pars[9]
t2 <- pars[10]
t0 <<- t1
res <- matrix(ncol=10,nrow=0)
k1carr <- 1/(m10 + m11)
k1non <- 1/(m01 + m00)
for(i in t1:t2) {
k <- m00*exp(-1*mu00*(i-t1)) + m01*exp(-1*mu01*(i-t1)) + m10*exp(-1*mu10*(i-t1)) + m11*exp(-1*mu11*(i-t1))
m1t <- (m10*exp(-1*mu10*(i-t1)) + m11*exp(-1*mu11*(i-t1)))/k
m2t <- (m01*exp(-1*mu01*(i-t1)) + m11*exp(-1*mu11*(i-t1)))/k
S1carr <- (m10*exp(-1*mu10*(i-t1)) + m11*exp(-1*mu11*(i-t1)))*k1carr
S1non <- (m01*exp(-1*mu01*(i-t1)) + m00*exp(-1*mu00*(i-t1)))*k1non
ld <- round(m11t(i) - (m10t(i) + m11t(i))*(m01t(i) + m11t(i)),8)
res <- rbind(res, c(i, m00t(i), m01t(i), m11t(i), m10t(i), m1t, m2t, S1carr, S1non, ld))
}
colnames(res) <- c("t", "m00", "m01", "m11", "m10", "m1t", "m2t", "S1carr", "S1non", "ld")
dd <- list()
dd$m=res
dd
}
# Define server logic
data <- function(vals, dcase=FALSE) {
m00 <<- vals[1]
m01 <<- vals[2]
m10 <<- vals[3]
m11 <<- vals[4]
mu00 <- vals[5]
if(dcase == TRUE) {
D1 <- vals[6]
D2 <- vals[7]
mu10 <- mu00*(1+D1)
mu01 <- mu00*(1+D2)
mu11 <- mu00*(1+D1 + D2)
} else {
H1 <- vals[6]
H2 <- vals[7]
mu10 <- mu00*H1
mu01 <- mu00*H2
mu11 <- mu00*H1*H2
}
t1 <- vals[8]
t2 <- vals[9]
#-----------------#
dd <- calc(pars=c(m00, m01, m10, m11, mu10, mu00, mu11, mu01, t1, t2))
pvv1 <<- m10 + m11
pvv2 <<- m01 + m11
dd$mu00 <- mu00
dd$mu10 <- mu10
dd$mu01 <- mu01
dd$mu11 <- mu11
dd
}
mPlot <- function(cols=1, save=F, params){
dd <- data(params)
m <- dd$m
pm1 <- ggplot(data=data.frame(m), aes(t)) + geom_line(aes(y = m1t,color='m1'),cex=2) + theme_bw() +
xlab("t") + ylab("m1,m2(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 10)) +
geom_line(aes(y = m2t,color='m2', color='m2'),cex=2) +
scale_colour_manual(values=c("red","blue4"))
# LD
pld <- ggplot(data=data.frame(m), aes(t)) + geom_line(aes(y = ld,color='LD(t)'),cex=2) + theme_bw() +
xlab("t") + ylab("LD(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.position="none")
ps = ggplot(data=data.frame(m), aes(t)) + theme_bw() +
geom_line(aes(y = S1carr,color='S1carr'),cex=2) +
geom_line(aes(y = S1non, color="S1non"), linetype="dashed",cex=2) +
xlab("t") + ylab("S(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 10)) +
scale_colour_manual(values=c("red","blue4"))
pmij=ggplot(data=data.frame(m), aes(t)) + theme_bw() +
geom_line(aes(y = m00,color='m00', size=Mij),cex=2) +
geom_line(aes(y = m01,color='m01', size=Mij),cex=2) +
geom_line(aes(y = m10,color='m10', size=Mij),cex=2) +
geom_line(aes(y = m11,color='m11', size=Mij),cex=2) +
xlab("t") + ylab("mij(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.position=c(0.9, .5), legend.title=element_blank(), legend.text = element_text(size = 10))
multiplot(pm1, pld, ps, pmij, cols=cols)
}
muPlot <- function(save=F, cols=1, params) {
dd <- data(params)
t1 <- params[8]
t2 <- params[9]
m <- dd$m
m0t <- 1 - m[,"m1t"]
print(m[,"m00"]/m0t)
print(m0t)
print(m[,"m00"])
mu1 <- dd$mu10*m[,"m10"]/m[,"m1t"] + dd$mu11*m[,"m11"]/m[,"m1t"]
mu0 <- dd$mu00*m[,"m00"]/m0t + dd$mu01*m[,"m01"]/m0t
mu <- cbind(t=t1:t2, mu1=mu1, mu0=mu0)
pmu <- ggplot(data=data.frame(mu), aes(t)) + geom_line(aes(y = mu1,color="mu1"),cex=2) + theme_bw() +
xlab("t") + ylab("mu1(t),mu0(t)") + theme(axis.text=element_text(size=16), axis.title=element_text(size=22,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 16)) +
scale_colour_manual(values=c("blue4","red")) +
geom_line(aes(y = mu0, color="mu0"), linetype="dashed", cex=2)
pmu
}
muPlot(0.2, 0.4, 0.4, 0, 0.07, 0.85, 1.5, 30, 105)
muPlot(params=c(0.2, 0.4, 0.4, 0, 0.07, 0.85, 1.5, 30, 105))
plot(muPlot(params=c(0.2, 0.4, 0.4, 0, 0.07, 0.85, 1.5, 30, 105)))
ans<-muPlot(params=c(0.2, 0.4, 0.4, 0, 0.07, 0.85, 1.5, 30, 105))
ans
library(ggplot2)
library(grid)
library(extrafont)
source("multiplot.R")
oldState<-NULL
newState<-NULL
t0 <- NULL
pvv1 <- NULL
pvv2 <- NULL
m00 <- NULL
m10 <- NULL
m01 <- NULL
calc <- function(pars) {
m00 <- pars[1]
m01 <- pars[2]
m10 <- pars[3]
m11 <- pars[4]
mu10 <- pars[5]
mu00 <- pars[6]
mu11 <- pars[7]
mu01 <- pars[8]
m00t <- function(t) {
m00*exp(-1*mu00*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
m01t <- function(t) {
m01*exp(-1*mu01*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
m11t <- function(t) {
m11*exp(-1*mu11*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
m10t <- function(t) {
m10*exp(-1*mu10*(t-t0))/(m00*exp(-1*mu00*(t-t0)) + m01*exp(-1*mu01*(t-t0)) + m10*exp(-1*mu10*(t-t0)) + m11*exp(-1*mu11*(t-t0)))
}
t1 <- pars[9]
t2 <- pars[10]
t0 <<- t1
res <- matrix(ncol=10,nrow=0)
k1carr <- 1/(m10 + m11)
k1non <- 1/(m01 + m00)
for(i in t1:t2) {
k <- m00*exp(-1*mu00*(i-t1)) + m01*exp(-1*mu01*(i-t1)) + m10*exp(-1*mu10*(i-t1)) + m11*exp(-1*mu11*(i-t1))
m1t <- (m10*exp(-1*mu10*(i-t1)) + m11*exp(-1*mu11*(i-t1)))/k
m2t <- (m01*exp(-1*mu01*(i-t1)) + m11*exp(-1*mu11*(i-t1)))/k
S1carr <- (m10*exp(-1*mu10*(i-t1)) + m11*exp(-1*mu11*(i-t1)))*k1carr
S1non <- (m01*exp(-1*mu01*(i-t1)) + m00*exp(-1*mu00*(i-t1)))*k1non
ld <- round(m11t(i) - (m10t(i) + m11t(i))*(m01t(i) + m11t(i)),8)
res <- rbind(res, c(i, m00t(i), m01t(i), m11t(i), m10t(i), m1t, m2t, S1carr, S1non, ld))
}
colnames(res) <- c("t", "m00", "m01", "m11", "m10", "m1t", "m2t", "S1carr", "S1non", "ld")
dd <- list()
dd$m=res
dd
}
# Define server logic
data <- function(vals, dcase=FALSE) {
m00 <<- vals[1]
m01 <<- vals[2]
m10 <<- vals[3]
m11 <<- vals[4]
mu00 <- vals[5]
if(dcase == TRUE) {
D1 <- vals[6]
D2 <- vals[7]
mu10 <- mu00*(1+D1)
mu01 <- mu00*(1+D2)
mu11 <- mu00*(1+D1 + D2)
} else {
H1 <- vals[6]
H2 <- vals[7]
mu10 <- mu00*H1
mu01 <- mu00*H2
mu11 <- mu00*H1*H2
}
t1 <- vals[8]
t2 <- vals[9]
#-----------------#
dd <- calc(pars=c(m00, m01, m10, m11, mu10, mu00, mu11, mu01, t1, t2))
pvv1 <<- m10 + m11
pvv2 <<- m01 + m11
dd$mu00 <- mu00
dd$mu10 <- mu10
dd$mu01 <- mu01
dd$mu11 <- mu11
dd
}
mPlot <- function(cols=1, save=F, params){
dd <- data(params)
m <- dd$m
pm1 <- ggplot(data=data.frame(m), aes(t)) + geom_line(aes(y = m1t,color='m1'),cex=2) + theme_bw() +
xlab("t") + ylab("m1,m2(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 10)) +
geom_line(aes(y = m2t,color='m2', color='m2'),cex=2) +
scale_colour_manual(values=c("red","blue4"))
# LD
pld <- ggplot(data=data.frame(m), aes(t)) + geom_line(aes(y = ld,color='LD(t)'),cex=2) + theme_bw() +
xlab("t") + ylab("LD(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.position="none")
ps = ggplot(data=data.frame(m), aes(t)) + theme_bw() +
geom_line(aes(y = S1carr,color='S1carr'),cex=2) +
geom_line(aes(y = S1non, color="S1non"), linetype="dashed",cex=2) +
xlab("t") + ylab("S(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 10)) +
scale_colour_manual(values=c("red","blue4"))
pmij=ggplot(data=data.frame(m), aes(t)) + theme_bw() +
geom_line(aes(y = m00,color='m00', size=Mij),cex=2) +
geom_line(aes(y = m01,color='m01', size=Mij),cex=2) +
geom_line(aes(y = m10,color='m10', size=Mij),cex=2) +
geom_line(aes(y = m11,color='m11', size=Mij),cex=2) +
xlab("t") + ylab("mij(t)") + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold")) +
theme(legend.position=c(0.9, .5), legend.title=element_blank(), legend.text = element_text(size = 10))
multiplot(pm1, pld, ps, pmij, cols=cols)
}
muPlot <- function(cols=1, params) {
dd <- data(params)
t1 <- params[8]
t2 <- params[9]
m <- dd$m
m0t <- 1 - m[,"m1t"]
print(m[,"m00"]/m0t)
print(m0t)
print(m[,"m00"])
mu1 <- dd$mu10*m[,"m10"]/m[,"m1t"] + dd$mu11*m[,"m11"]/m[,"m1t"]
mu0 <- dd$mu00*m[,"m00"]/m0t + dd$mu01*m[,"m01"]/m0t
mu <- cbind(t=t1:t2, mu1=mu1, mu0=mu0)
pmu <- ggplot(data=data.frame(mu), aes(t)) + geom_line(aes(y = mu1,color="mu1"),cex=2) + theme_bw() +
xlab("t") + ylab("mu1(t),mu0(t)") + theme(axis.text=element_text(size=16), axis.title=element_text(size=22,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 16)) +
scale_colour_manual(values=c("blue4","red")) +
geom_line(aes(y = mu0, color="mu0"), linetype="dashed", cex=2)
pmu
}
ans<-muPlot(params=c(0.2, 0.4, 0.4, 0, 0.07, 0.85, 1.5, 30, 105))
ans
dd
params=c(0.2, 0.4, 0.4, 0, 0.07, 0.85, 1.5, 30, 105)
dd <- data(params)
t1 <- params[8]
t2 <- params[9]
m <- dd$m
t1
t2
m0t <- 1 - m[,"m1t"]
print(m[,"m00"]/m0t)
print(m0t)
print(m[,"m00"])
mu1 <- dd$mu10*m[,"m10"]/m[,"m1t"] + dd$mu11*m[,"m11"]/m[,"m1t"]
mu0 <- dd$mu00*m[,"m00"]/m0t + dd$mu01*m[,"m01"]/m0t
mu <- cbind(t=t1:t2, mu1=mu1, mu0=mu0)
pmu <- ggplot(data=data.frame(mu), aes(t)) + geom_line(aes(y = mu1,color="mu1"),cex=2) + theme_bw() +
xlab("t") + ylab("mu1(t),mu0(t)") + theme(axis.text=element_text(size=16), axis.title=element_text(size=22,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 16)) +
scale_colour_manual(values=c("blue4","red")) +
geom_line(aes(y = mu0, color="mu0"), linetype="dashed", cex=2)
pmu
ggplot(data=data.frame(mu), aes(t)) + geom_line(aes(y = mu1,color="mu1"),cex=2) + theme_bw() +
xlab("t") + ylab("mu1(t),mu0(t)") + theme(axis.text=element_text(size=16), axis.title=element_text(size=22,face="bold")) +
theme(legend.justification=c(1,0), legend.position=c(1,0.5), legend.title=element_blank(), legend.text = element_text(size = 16)) +
scale_colour_manual(values=c("blue4","red")) +
geom_line(aes(y = mu0, color="mu0"), linetype="dashed", cex=2)
shiny::runApp('Projects/ld_effects')
library(shinyapps)
shinyapps::setAccountInfo(name='ilmadester',token='1D5950B47F9FFD38E2ED2609985BAF8A',secret='fbL28KfBVVOGAG2NNR6kFpUW6gIcKlZZ04Fxpmnx')
shinyapps::deployApp("~/Projects/ld_effects/", account="ilmadester")
library(shinyapps)
shinyapps::setAccountInfo(name='ilmadester',token='1D5950B47F9FFD38E2ED2609985BAF8A',secret='fbL28KfBVVOGAG2NNR6kFpUW6gIcKlZZ04Fxpmnx')
shinyapps::deployApp("~/Projects/ld_effects/", account="ilmadester")
library(openxlsx)
read.xlsx("~/Dropbox/snp_ALL_0.xlsx")
read.xlsx("~/Dropbox/snp_ALL_0.xlsx", sheet = 1)
ans<-read.xlsx("~/Dropbox/snp_ALL_0.xlsx", sheet = 1)
head(ans)
library(spm)
?prepare_data
longdat <- read.csv(system.file("data","longdat.csv",package="spm"))
vitstat <- read.csv(system.file("data","vitstat.csv",package="spm"))
longdat.nonan <- longdat[which(is.na(longdat$Age) == F),]
vitstat.nonan <- vitstat[which(is.na(vitstat$BirthCohort) == F),]
data=prepare_data(longdat=longdat.nonan, vitstat=vitstat.nonan,interval=1, col.status="IsDead", col.id="ID", col.age="Age", col.age.event="LSmort", covariates=c("DBP"), verbose=T)
longdat.nonan <- longdat[which(is.na(longdat$Age) == F),]
vitstat.nonan <- vitstat[which(is.na(vitstat$BirthCohort) == F),]
data=prepare_data(longdat=longdat, vitstat=vitstat,interval=1, col.status="IsDead", col.id="ID", col.age="Age", col.age.event="LSmort", covariates=c("DBP"), verbose=T)
head(data[[1]])
head(data[[2]])
longdat.nonan <- longdat[which(is.na(longdat$Age) == F),]
vitstat.nonan <- vitstat[which(is.na(vitstat$BirthCohort) == F),]
data=prepare_data(longdat=longdat, vitstat=vitstat,interval=2, col.status="IsDead", col.id="ID", col.age="Age", col.age.event="LSmort", covariates=c("DBP"), verbose=T)
head(data[[2]])
head(data[[1]])
t.v1 <- read.table("~/Dropbox/spm/tests/Simulation/results/res.table.2d.bmi.dbp.discr.csv")
t.v1
colMeans(t.v1)
colMeans(x=t.v1)
colMeans(x=t.v1, dims = 2)
colMeans(x=t.v1, dims = "columns")
colMeans(x=t.v1, dims = "cols")
?colMeans
colMeans(x=t.v1, dims = 1)
colMeans(x=t.v1, dims = 2)
colMeans(x=t.v1, dims = 0)
colMeans(x=t.v1, dims = 1:16)
View(t.v1)
t.v1 <- read.table("~/Dropbox/spm/tests/Simulation/results/res.table.2d.bmi.dbp.discr.csv", header=T)
colMeans(x=t.v1)
apply(t.v1, 2, sd)
t.v1 <- read.table("~/Dropbox/spm/tests/Simulation/results/res.table.2d.bmi.dbp.cont.csv", header=T)
colMeans(x=t.v1)
apply(t.v1, 2, sd)
setwd("~/Projects/spm")
devtools::document()
devtools::document()
devtools::document()
library(spm)
?simdata_discrete_MD
?simdata_discr_MD
?spm_continuous_MD
?simdata_time_dep
